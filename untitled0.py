# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/11WsDkXXUVvkH5ambGPK4EYwsk7hMhs_B
"""

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.impute import SimpleImputer
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_squared_error
from math import sqrt

# Load train and test data
train_data = pd.read_csv("train.csv")
test_data = pd.read_csv("test.csv")

# Drop 'Outlet_Size' column from both train and test data
train_data.drop(columns=['Outlet_Size'], inplace=True)
test_data.drop(columns=['Outlet_Size'], inplace=True)

# Drop rows with missing values in train data
train_data.dropna(inplace=True)

# Encoding categorical variables
columns_to_encode = ['Item_Fat_Content', 'Item_Type', 'Outlet_Location_Type', 'Outlet_Type']
train_data = pd.get_dummies(train_data, columns=columns_to_encode)
test_data = pd.get_dummies(test_data, columns=columns_to_encode)

# Ensure 'Outlet_Identifier' column is encoded in both datasets
train_data = pd.get_dummies(train_data, columns=['Outlet_Identifier'])
test_data = pd.get_dummies(test_data, columns=['Outlet_Identifier'])

# Add missing columns from train_data to test_data
missing_cols = set(train_data.columns) - set(test_data.columns)
for col in missing_cols:
    test_data[col] = 0

# Ensure columns are aligned
train_data, test_data = train_data.align(test_data, join='outer', axis=1, fill_value=0)

# Splitting features and target variable
X = train_data.drop(columns=['Item_Outlet_Sales', 'Item_Identifier'])
y = train_data['Item_Outlet_Sales']

# Splitting data into train and validation sets
X_train, X_val, y_train, y_val = train_test_split(X, y, test_size=0.2, random_state=42)

# Initialize and train the model
model = RandomForestRegressor(random_state=42)
model.fit(X_train, y_train)

# Predict on validation set
val_predictions = model.predict(X_val)

# Calculate RMSE
rmse = sqrt(mean_squared_error(y_val, val_predictions))
print("RMSE on validation set:", rmse)

# Ensure columns are aligned with training data
test_data_aligned = test_data.reindex(columns=X_train.columns, fill_value=0)

# Impute missing values in 'Item_Weight' column
imputer = SimpleImputer(strategy='median')
test_data_aligned['Item_Weight'] = imputer.fit_transform(test_data_aligned[['Item_Weight']])

# Predict on test set
test_predictions = model.predict(test_data_aligned)

# Load the 'Outlet_Identifier' column from the original test dataset
test_outlet_identifier = pd.read_csv("test.csv")['Outlet_Identifier']

# Prepare submission file
submission = pd.DataFrame({'Item_Identifier': test_data['Item_Identifier'],
                           'Outlet_Identifier': test_outlet_identifier,
                           'Item_Outlet_Sales': test_predictions})

# Save submission file
submission.to_csv('submission.csv', index=False)